#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def load(self, loadScript, configInfo):
    """
    Parameters:
     - loadScript
     - configInfo
    """
    pass

  def unload(self, unloadScript, fromDate, toDate, shopId, cashCode, configInfo):
    """
    Parameters:
     - unloadScript
     - fromDate
     - toDate
     - shopId
     - cashCode
     - configInfo
    """
    pass

  def execute(self, command):
    """
    Parameters:
     - command
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def load(self, loadScript, configInfo):
    """
    Parameters:
     - loadScript
     - configInfo
    """
    self.send_load(loadScript, configInfo)

  def send_load(self, loadScript, configInfo):
    self._oprot.writeMessageBegin('load', TMessageType.ONEWAY, self._seqid)
    args = load_args()
    args.loadScript = loadScript
    args.configInfo = configInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def unload(self, unloadScript, fromDate, toDate, shopId, cashCode, configInfo):
    """
    Parameters:
     - unloadScript
     - fromDate
     - toDate
     - shopId
     - cashCode
     - configInfo
    """
    self.send_unload(unloadScript, fromDate, toDate, shopId, cashCode, configInfo)

  def send_unload(self, unloadScript, fromDate, toDate, shopId, cashCode, configInfo):
    self._oprot.writeMessageBegin('unload', TMessageType.ONEWAY, self._seqid)
    args = unload_args()
    args.unloadScript = unloadScript
    args.fromDate = fromDate
    args.toDate = toDate
    args.shopId = shopId
    args.cashCode = cashCode
    args.configInfo = configInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def execute(self, command):
    """
    Parameters:
     - command
    """
    self.send_execute(command)
    return self.recv_execute()

  def send_execute(self, command):
    self._oprot.writeMessageBegin('execute', TMessageType.CALL, self._seqid)
    args = execute_args()
    args.command = command
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_execute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = execute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "execute failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["load"] = Processor.process_load
    self._processMap["unload"] = Processor.process_unload
    self._processMap["execute"] = Processor.process_execute

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_load(self, seqid, iprot, oprot):
    args = load_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.load(args.loadScript, args.configInfo)
    return

  def process_unload(self, seqid, iprot, oprot):
    args = unload_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.unload(args.unloadScript, args.fromDate, args.toDate, args.shopId, args.cashCode, args.configInfo)
    return

  def process_execute(self, seqid, iprot, oprot):
    args = execute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = execute_result()
    result.success = self._handler.execute(args.command)
    oprot.writeMessageBegin("execute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class load_args:
  """
  Attributes:
   - loadScript
   - configInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'loadScript', None, None, ), # 1
    (2, TType.STRUCT, 'configInfo', (SyncConfigInfo, SyncConfigInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, loadScript=None, configInfo=None,):
    self.loadScript = loadScript
    self.configInfo = configInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.loadScript = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.configInfo = SyncConfigInfo()
          self.configInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('load_args')
    if self.loadScript is not None:
      oprot.writeFieldBegin('loadScript', TType.STRING, 1)
      oprot.writeString(self.loadScript)
      oprot.writeFieldEnd()
    if self.configInfo is not None:
      oprot.writeFieldBegin('configInfo', TType.STRUCT, 2)
      self.configInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.loadScript)
    value = (value * 31) ^ hash(self.configInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unload_args:
  """
  Attributes:
   - unloadScript
   - fromDate
   - toDate
   - shopId
   - cashCode
   - configInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'unloadScript', None, None, ), # 1
    (2, TType.STRING, 'fromDate', None, None, ), # 2
    (3, TType.STRING, 'toDate', None, None, ), # 3
    (4, TType.STRING, 'shopId', None, None, ), # 4
    (5, TType.STRING, 'cashCode', None, None, ), # 5
    (6, TType.STRUCT, 'configInfo', (SyncConfigInfo, SyncConfigInfo.thrift_spec), None, ), # 6
  )

  def __init__(self, unloadScript=None, fromDate=None, toDate=None, shopId=None, cashCode=None, configInfo=None,):
    self.unloadScript = unloadScript
    self.fromDate = fromDate
    self.toDate = toDate
    self.shopId = shopId
    self.cashCode = cashCode
    self.configInfo = configInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.unloadScript = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.fromDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.toDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.shopId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cashCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.configInfo = SyncConfigInfo()
          self.configInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unload_args')
    if self.unloadScript is not None:
      oprot.writeFieldBegin('unloadScript', TType.STRING, 1)
      oprot.writeString(self.unloadScript)
      oprot.writeFieldEnd()
    if self.fromDate is not None:
      oprot.writeFieldBegin('fromDate', TType.STRING, 2)
      oprot.writeString(self.fromDate)
      oprot.writeFieldEnd()
    if self.toDate is not None:
      oprot.writeFieldBegin('toDate', TType.STRING, 3)
      oprot.writeString(self.toDate)
      oprot.writeFieldEnd()
    if self.shopId is not None:
      oprot.writeFieldBegin('shopId', TType.STRING, 4)
      oprot.writeString(self.shopId)
      oprot.writeFieldEnd()
    if self.cashCode is not None:
      oprot.writeFieldBegin('cashCode', TType.STRING, 5)
      oprot.writeString(self.cashCode)
      oprot.writeFieldEnd()
    if self.configInfo is not None:
      oprot.writeFieldBegin('configInfo', TType.STRUCT, 6)
      self.configInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.unloadScript)
    value = (value * 31) ^ hash(self.fromDate)
    value = (value * 31) ^ hash(self.toDate)
    value = (value * 31) ^ hash(self.shopId)
    value = (value * 31) ^ hash(self.cashCode)
    value = (value * 31) ^ hash(self.configInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class execute_args:
  """
  Attributes:
   - command
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'command', None, None, ), # 1
  )

  def __init__(self, command=None,):
    self.command = command

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.command = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('execute_args')
    if self.command is not None:
      oprot.writeFieldBegin('command', TType.STRING, 1)
      oprot.writeString(self.command)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.command)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class execute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ExecuteResult, ExecuteResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ExecuteResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('execute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
