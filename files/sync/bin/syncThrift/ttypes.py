#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SyncConfigInfo:
  """
  Attributes:
   - shopId
   - shopCode
   - cashId
   - cashCode
   - clusterId
   - httpHostCS
   - httpPortCS
   - qpidHostCS
   - qpidPortCS
   - dictUrlHostCS
   - dictUrlPortCS
   - grpcHostCS
   - grpcPortCS
   - protocolVersion
   - unloadSalesRequestThroughCS
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'shopId', None, None, ), # 1
    (2, TType.STRING, 'shopCode', None, None, ), # 2
    (3, TType.STRING, 'cashId', None, None, ), # 3
    (4, TType.STRING, 'cashCode', None, None, ), # 4
    (5, TType.STRING, 'clusterId', None, None, ), # 5
    (6, TType.STRING, 'httpHostCS', None, None, ), # 6
    (7, TType.I32, 'httpPortCS', None, None, ), # 7
    (8, TType.STRING, 'qpidHostCS', None, None, ), # 8
    (9, TType.I32, 'qpidPortCS', None, None, ), # 9
    (10, TType.STRING, 'dictUrlHostCS', None, None, ), # 10
    (11, TType.I32, 'dictUrlPortCS', None, None, ), # 11
    (12, TType.STRING, 'grpcHostCS', None, None, ), # 12
    (13, TType.I32, 'grpcPortCS', None, None, ), # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I32, 'protocolVersion', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.BOOL, 'unloadSalesRequestThroughCS', None, None, ), # 50
  )

  def __init__(self, shopId=None, shopCode=None, cashId=None, cashCode=None, clusterId=None, httpHostCS=None, httpPortCS=None, qpidHostCS=None, qpidPortCS=None, dictUrlHostCS=None, dictUrlPortCS=None, grpcHostCS=None, grpcPortCS=None, protocolVersion=None, unloadSalesRequestThroughCS=None,):
    self.shopId = shopId
    self.shopCode = shopCode
    self.cashId = cashId
    self.cashCode = cashCode
    self.clusterId = clusterId
    self.httpHostCS = httpHostCS
    self.httpPortCS = httpPortCS
    self.qpidHostCS = qpidHostCS
    self.qpidPortCS = qpidPortCS
    self.dictUrlHostCS = dictUrlHostCS
    self.dictUrlPortCS = dictUrlPortCS
    self.grpcHostCS = grpcHostCS
    self.grpcPortCS = grpcPortCS
    self.protocolVersion = protocolVersion
    self.unloadSalesRequestThroughCS = unloadSalesRequestThroughCS

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.shopId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shopCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cashId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cashCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.httpHostCS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.httpPortCS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.qpidHostCS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.qpidPortCS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.dictUrlHostCS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.dictUrlPortCS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.grpcHostCS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.grpcPortCS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.protocolVersion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.BOOL:
          self.unloadSalesRequestThroughCS = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SyncConfigInfo')
    if self.shopId is not None:
      oprot.writeFieldBegin('shopId', TType.STRING, 1)
      oprot.writeString(self.shopId)
      oprot.writeFieldEnd()
    if self.shopCode is not None:
      oprot.writeFieldBegin('shopCode', TType.STRING, 2)
      oprot.writeString(self.shopCode)
      oprot.writeFieldEnd()
    if self.cashId is not None:
      oprot.writeFieldBegin('cashId', TType.STRING, 3)
      oprot.writeString(self.cashId)
      oprot.writeFieldEnd()
    if self.cashCode is not None:
      oprot.writeFieldBegin('cashCode', TType.STRING, 4)
      oprot.writeString(self.cashCode)
      oprot.writeFieldEnd()
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 5)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    if self.httpHostCS is not None:
      oprot.writeFieldBegin('httpHostCS', TType.STRING, 6)
      oprot.writeString(self.httpHostCS)
      oprot.writeFieldEnd()
    if self.httpPortCS is not None:
      oprot.writeFieldBegin('httpPortCS', TType.I32, 7)
      oprot.writeI32(self.httpPortCS)
      oprot.writeFieldEnd()
    if self.qpidHostCS is not None:
      oprot.writeFieldBegin('qpidHostCS', TType.STRING, 8)
      oprot.writeString(self.qpidHostCS)
      oprot.writeFieldEnd()
    if self.qpidPortCS is not None:
      oprot.writeFieldBegin('qpidPortCS', TType.I32, 9)
      oprot.writeI32(self.qpidPortCS)
      oprot.writeFieldEnd()
    if self.dictUrlHostCS is not None:
      oprot.writeFieldBegin('dictUrlHostCS', TType.STRING, 10)
      oprot.writeString(self.dictUrlHostCS)
      oprot.writeFieldEnd()
    if self.dictUrlPortCS is not None:
      oprot.writeFieldBegin('dictUrlPortCS', TType.I32, 11)
      oprot.writeI32(self.dictUrlPortCS)
      oprot.writeFieldEnd()
    if self.grpcHostCS is not None:
      oprot.writeFieldBegin('grpcHostCS', TType.STRING, 12)
      oprot.writeString(self.grpcHostCS)
      oprot.writeFieldEnd()
    if self.grpcPortCS is not None:
      oprot.writeFieldBegin('grpcPortCS', TType.I32, 13)
      oprot.writeI32(self.grpcPortCS)
      oprot.writeFieldEnd()
    if self.protocolVersion is not None:
      oprot.writeFieldBegin('protocolVersion', TType.I32, 40)
      oprot.writeI32(self.protocolVersion)
      oprot.writeFieldEnd()
    if self.unloadSalesRequestThroughCS is not None:
      oprot.writeFieldBegin('unloadSalesRequestThroughCS', TType.BOOL, 50)
      oprot.writeBool(self.unloadSalesRequestThroughCS)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shopId)
    value = (value * 31) ^ hash(self.shopCode)
    value = (value * 31) ^ hash(self.cashId)
    value = (value * 31) ^ hash(self.cashCode)
    value = (value * 31) ^ hash(self.clusterId)
    value = (value * 31) ^ hash(self.httpHostCS)
    value = (value * 31) ^ hash(self.httpPortCS)
    value = (value * 31) ^ hash(self.qpidHostCS)
    value = (value * 31) ^ hash(self.qpidPortCS)
    value = (value * 31) ^ hash(self.dictUrlHostCS)
    value = (value * 31) ^ hash(self.dictUrlPortCS)
    value = (value * 31) ^ hash(self.grpcHostCS)
    value = (value * 31) ^ hash(self.grpcPortCS)
    value = (value * 31) ^ hash(self.protocolVersion)
    value = (value * 31) ^ hash(self.unloadSalesRequestThroughCS)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExecuteResult:
  """
  Attributes:
   - out
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out', None, None, ), # 1
    (2, TType.STRING, 'err', None, None, ), # 2
  )

  def __init__(self, out=None, err=None,):
    self.out = out
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.err = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExecuteResult')
    if self.out is not None:
      oprot.writeFieldBegin('out', TType.STRING, 1)
      oprot.writeString(self.out)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRING, 2)
      oprot.writeString(self.err)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.out)
    value = (value * 31) ^ hash(self.err)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
